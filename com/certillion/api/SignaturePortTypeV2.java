
package com.certillion.api;

import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.jws.soap.SOAPBinding;
import javax.xml.bind.annotation.XmlSeeAlso;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.2.9-b130926.1035
 * Generated source version: 2.2
 * 
 */
@WebService(name = "SignaturePortTypeV2", targetNamespace = "http://esec.com.br/mss/ap")
@SOAPBinding(style = SOAPBinding.Style.RPC)
@XmlSeeAlso({
    ObjectFactory.class
})
public interface SignaturePortTypeV2 {


    /**
     * 
     * @param validatePdfReq
     * @return
     *     returns com.certillion.api.ValidateRespType
     * @throws ICPMException
     */
    @WebMethod(operationName = "ValidatePdf")
    @WebResult(name = "ValidateResp", partName = "ValidateResp")
    public ValidateRespType validatePdf(
        @WebParam(name = "ValidatePdfReq", partName = "ValidatePdfReq")
        ValidatePdfReqType validatePdfReq)
        throws ICPMException
    ;

    /**
     * 
     * @return
     *     returns com.certillion.api.BandwidthInfoType
     * @throws ICPMException
     */
    @WebMethod(operationName = "FindBandwidthInfo")
    @WebResult(name = "BandwidthInfoType", partName = "BandwidthInfoType")
    public BandwidthInfoType findBandwidthInfo()
        throws ICPMException
    ;

    /**
     * 
     * @param signatureStatusReq
     * @return
     *     returns com.certillion.api.StatusRespType
     * @throws ICPMException
     */
    @WebMethod(operationName = "SignatureStatusQuery")
    @WebResult(name = "SignatureStatusReq", partName = "SignatureStatusReq")
    public StatusRespType signatureStatusQuery(
        @WebParam(name = "SignatureStatusReq", partName = "SignatureStatusReq")
        SignatureStatusReqType signatureStatusReq)
        throws ICPMException
    ;

    /**
     * 
     * @param findSignatureReq
     * @return
     *     returns com.certillion.api.SignatureStatusRespType
     * @throws ICPMException
     */
    @WebMethod(operationName = "FindSignature")
    @WebResult(name = "SignatureStatusReq", partName = "SignatureStatusReq")
    public SignatureStatusRespType findSignature(
        @WebParam(name = "FindSignatureReq", partName = "FindSignatureReq")
        FindSignatureReqType findSignatureReq)
        throws ICPMException
    ;

    /**
     * 
     * @param simpleSignatureReqType
     * @return
     *     returns com.certillion.api.SimpleSignatureRespTypeV4
     * @throws ICPMException
     */
    @WebMethod(operationName = "SimpleSignature")
    @WebResult(name = "SimpleSignatureRespType", partName = "SimpleSignatureRespType")
    public SimpleSignatureRespTypeV4 simpleSignature(
        @WebParam(name = "SimpleSignatureReqType", partName = "SimpleSignatureReqType")
        SimpleSignatureReqTypeV4 simpleSignatureReqType)
        throws ICPMException
    ;

    /**
     * 
     * @param batchSignatureReqType
     * @return
     *     returns com.certillion.api.BatchSignatureRespTypeV2
     * @throws ICPMException
     */
    @WebMethod(operationName = "BatchSignature")
    @WebResult(name = "BatchSignatureRespType", partName = "BatchSignatureRespType")
    public BatchSignatureRespTypeV2 batchSignature(
        @WebParam(name = "BatchSignatureReqType", partName = "BatchSignatureReqType")
        BatchSignatureReqTypeV2 batchSignatureReqType)
        throws ICPMException
    ;

    /**
     * 
     * @param validateReq
     * @return
     *     returns com.certillion.api.ValidateRespType
     * @throws ICPMException
     */
    @WebMethod(operationName = "Validate")
    @WebResult(name = "ValidateResp", partName = "ValidateResp")
    public ValidateRespType validate(
        @WebParam(name = "ValidateReq", partName = "ValidateReq")
        ValidateReqType validateReq)
        throws ICPMException
    ;

}
